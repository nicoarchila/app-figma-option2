{"ast":null,"code":"var _slicedToArray = require(\"/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\n//TODO: handle comments\nfunction readDocType(xmlData, i) {\n  var entities = {};\n  if (xmlData[i + 3] === 'O' && xmlData[i + 4] === 'C' && xmlData[i + 5] === 'T' && xmlData[i + 6] === 'Y' && xmlData[i + 7] === 'P' && xmlData[i + 8] === 'E') {\n    i = i + 9;\n    var angleBracketsCount = 1;\n    var hasBody = false,\n      comment = false;\n    var exp = \"\";\n    for (; i < xmlData.length; i++) {\n      if (xmlData[i] === '<' && !comment) {\n        //Determine the tag type\n        if (hasBody && isEntity(xmlData, i)) {\n          i += 7;\n          var _readEntityExp = readEntityExp(xmlData, i + 1);\n          var _readEntityExp2 = _slicedToArray(_readEntityExp, 3);\n          entityName = _readEntityExp2[0];\n          val = _readEntityExp2[1];\n          i = _readEntityExp2[2];\n          if (val.indexOf(\"&\") === -1)\n            //Parameter entities are not supported\n            entities[validateEntityName(entityName)] = {\n              regx: RegExp(\"&\".concat(entityName, \";\"), \"g\"),\n              val: val\n            };\n        } else if (hasBody && isElement(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isAttlist(xmlData, i)) i += 8; //Not supported\n        else if (hasBody && isNotation(xmlData, i)) i += 9; //Not supported\n        else if (isComment) comment = true;else throw new Error(\"Invalid DOCTYPE\");\n        angleBracketsCount++;\n        exp = \"\";\n      } else if (xmlData[i] === '>') {\n        //Read tag content\n        if (comment) {\n          if (xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\") {\n            comment = false;\n            angleBracketsCount--;\n          }\n        } else {\n          angleBracketsCount--;\n        }\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      } else if (xmlData[i] === '[') {\n        hasBody = true;\n      } else {\n        exp += xmlData[i];\n      }\n    }\n    if (angleBracketsCount !== 0) {\n      throw new Error(\"Unclosed DOCTYPE\");\n    }\n  } else {\n    throw new Error(\"Invalid Tag instead of DOCTYPE\");\n  }\n  return {\n    entities: entities,\n    i: i\n  };\n}\nfunction readEntityExp(xmlData, i) {\n  //External entities are not supported\n  //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n  //Parameter entities are not supported\n  //    <!ENTITY entityname \"&anotherElement;\">\n\n  //Internal entities are supported\n  //    <!ENTITY entityname \"replacement text\">\n\n  //read EntityName\n  var entityName = \"\";\n  for (; i < xmlData.length && xmlData[i] !== \"'\" && xmlData[i] !== '\"'; i++) {\n    // if(xmlData[i] === \" \") continue;\n    // else \n    entityName += xmlData[i];\n  }\n  entityName = entityName.trim();\n  if (entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n  //read Entity Value\n  var startChar = xmlData[i++];\n  var val = \"\";\n  for (; i < xmlData.length && xmlData[i] !== startChar; i++) {\n    val += xmlData[i];\n  }\n  return [entityName, val, i];\n}\nfunction isComment(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === '-' && xmlData[i + 3] === '-') return true;\n  return false;\n}\nfunction isEntity(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'N' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'I' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'Y') return true;\n  return false;\n}\nfunction isElement(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'E' && xmlData[i + 3] === 'L' && xmlData[i + 4] === 'E' && xmlData[i + 5] === 'M' && xmlData[i + 6] === 'E' && xmlData[i + 7] === 'N' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isAttlist(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'A' && xmlData[i + 3] === 'T' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'L' && xmlData[i + 6] === 'I' && xmlData[i + 7] === 'S' && xmlData[i + 8] === 'T') return true;\n  return false;\n}\nfunction isNotation(xmlData, i) {\n  if (xmlData[i + 1] === '!' && xmlData[i + 2] === 'N' && xmlData[i + 3] === 'O' && xmlData[i + 4] === 'T' && xmlData[i + 5] === 'A' && xmlData[i + 6] === 'T' && xmlData[i + 7] === 'I' && xmlData[i + 8] === 'O' && xmlData[i + 9] === 'N') return true;\n  return false;\n}\n\n//an entity name should not contains special characters that may be used in regex\n//Eg !?\\\\\\/[]$%{}^&*()<>\nvar specialChar = \"!?\\\\\\/[]$%{}^&*()<>|+\";\nfunction validateEntityName(name) {\n  for (var i = 0; i < specialChar.length; i++) {\n    var ch = specialChar[i];\n    if (name.indexOf(ch) !== -1) throw new Error(\"Invalid character \".concat(ch, \" in entity name\"));\n  }\n  return name;\n}\nmodule.exports = readDocType;","map":{"version":3,"names":["readDocType","xmlData","i","entities","angleBracketsCount","hasBody","comment","exp","length","isEntity","_readEntityExp","readEntityExp","_readEntityExp2","_slicedToArray","entityName","val","indexOf","validateEntityName","regx","RegExp","concat","isElement","isAttlist","isNotation","isComment","Error","trim","startChar","specialChar","name","ch","module","exports"],"sources":["/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"],"sourcesContent":["//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\n//an entity name should not contains special characters that may be used in regex\n//Eg !?\\\\\\/[]$%{}^&*()<>\nconst specialChar = \"!?\\\\\\/[]$%{}^&*()<>|+\";\n\nfunction validateEntityName(name){\n    for (let i = 0; i < specialChar.length; i++) {\n        const ch = specialChar[i];\n        if(name.indexOf(ch) !== -1) throw new Error(`Invalid character ${ch} in entity name`);\n    }\n    return name;\n}\n\nmodule.exports = readDocType;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}