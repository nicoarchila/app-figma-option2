{"ast":null,"code":"var EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n  var indentation = \"\";\n  if (options.format && options.indentBy.length > 0) {\n    indentation = EOL;\n  }\n  return arrToStr(jArray, options, \"\", indentation);\n}\nfunction arrToStr(arr, options, jPath, indentation) {\n  var xmlStr = \"\";\n  var isPreviousElementTag = false;\n  for (var i = 0; i < arr.length; i++) {\n    var tagObj = arr[i];\n    var tagName = propName(tagObj);\n    var newJPath = \"\";\n    if (jPath.length === 0) newJPath = tagName;else newJPath = \"\".concat(jPath, \".\").concat(tagName);\n    if (tagName === options.textNodeName) {\n      var tagText = tagObj[tagName];\n      if (!isStopNode(newJPath, options)) {\n        tagText = options.tagValueProcessor(tagName, tagText);\n        tagText = replaceEntitiesValue(tagText, options);\n      }\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += tagText;\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.cdataPropName) {\n      if (isPreviousElementTag) {\n        xmlStr += indentation;\n      }\n      xmlStr += \"<![CDATA[\".concat(tagObj[tagName][0][options.textNodeName], \"]]>\");\n      isPreviousElementTag = false;\n      continue;\n    } else if (tagName === options.commentPropName) {\n      xmlStr += indentation + \"<!--\".concat(tagObj[tagName][0][options.textNodeName], \"-->\");\n      isPreviousElementTag = true;\n      continue;\n    } else if (tagName[0] === \"?\") {\n      var _attStr = attr_to_str(tagObj[\":@\"], options);\n      var tempInd = tagName === \"?xml\" ? \"\" : indentation;\n      var piTextNodeName = tagObj[tagName][0][options.textNodeName];\n      piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n      xmlStr += tempInd + \"<\".concat(tagName).concat(piTextNodeName).concat(_attStr, \"?>\");\n      isPreviousElementTag = true;\n      continue;\n    }\n    var newIdentation = indentation;\n    if (newIdentation !== \"\") {\n      newIdentation += options.indentBy;\n    }\n    var attStr = attr_to_str(tagObj[\":@\"], options);\n    var tagStart = indentation + \"<\".concat(tagName).concat(attStr);\n    var tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n    if (options.unpairedTags.indexOf(tagName) !== -1) {\n      if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";else xmlStr += tagStart + \"/>\";\n    } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n      xmlStr += tagStart + \"/>\";\n    } else if (tagValue && tagValue.endsWith(\">\")) {\n      xmlStr += tagStart + \">\".concat(tagValue).concat(indentation, \"</\").concat(tagName, \">\");\n    } else {\n      xmlStr += tagStart + \">\";\n      if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n        xmlStr += indentation + options.indentBy + tagValue + indentation;\n      } else {\n        xmlStr += tagValue;\n      }\n      xmlStr += \"</\".concat(tagName, \">\");\n    }\n    isPreviousElementTag = true;\n  }\n  return xmlStr;\n}\nfunction propName(obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key !== \":@\") return key;\n  }\n}\nfunction attr_to_str(attrMap, options) {\n  var attrStr = \"\";\n  if (attrMap && !options.ignoreAttributes) {\n    for (var attr in attrMap) {\n      var attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n      attrVal = replaceEntitiesValue(attrVal, options);\n      if (attrVal === true && options.suppressBooleanAttributes) {\n        attrStr += \" \".concat(attr.substr(options.attributeNamePrefix.length));\n      } else {\n        attrStr += \" \".concat(attr.substr(options.attributeNamePrefix.length), \"=\\\"\").concat(attrVal, \"\\\"\");\n      }\n    }\n  }\n  return attrStr;\n}\nfunction isStopNode(jPath, options) {\n  jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n  var tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n  for (var index in options.stopNodes) {\n    if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n  }\n  return false;\n}\nfunction replaceEntitiesValue(textValue, options) {\n  if (textValue && textValue.length > 0 && options.processEntities) {\n    for (var i = 0; i < options.entities.length; i++) {\n      var entity = options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\nmodule.exports = toXml;","map":{"version":3,"names":["EOL","toXml","jArray","options","indentation","format","indentBy","length","arrToStr","arr","jPath","xmlStr","isPreviousElementTag","i","tagObj","tagName","propName","newJPath","concat","textNodeName","tagText","isStopNode","tagValueProcessor","replaceEntitiesValue","cdataPropName","commentPropName","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","unpairedTags","indexOf","suppressUnpairedNode","suppressEmptyNode","endsWith","includes","obj","keys","Object","key","attrMap","attrStr","ignoreAttributes","attr","attrVal","attributeValueProcessor","suppressBooleanAttributes","substr","attributeNamePrefix","lastIndexOf","index","stopNodes","textValue","processEntities","entities","entity","replace","regex","val","module","exports"],"sources":["/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"],"sourcesContent":["const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}