{"ast":null,"code":"'use strict';\n\n///@ts-check\nvar _defineProperty = require(\"/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _createClass = require(\"/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _classCallCheck = require(\"/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar util = require('../util');\nvar xmlNode = require('./xmlNode');\nvar readDocType = require(\"./DocTypeReader\");\nvar toNumber = require(\"strnum\");\nvar regx = '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'.replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\nvar OrderedObjParser = /*#__PURE__*/_createClass(function OrderedObjParser(options) {\n  _classCallCheck(this, OrderedObjParser);\n  this.options = options;\n  this.currentNode = null;\n  this.tagsNodeStack = [];\n  this.docTypeEntities = {};\n  this.lastEntities = {\n    \"apos\": {\n      regex: /&(apos|#39|#x27);/g,\n      val: \"'\"\n    },\n    \"gt\": {\n      regex: /&(gt|#62|#x3E);/g,\n      val: \">\"\n    },\n    \"lt\": {\n      regex: /&(lt|#60|#x3C);/g,\n      val: \"<\"\n    },\n    \"quot\": {\n      regex: /&(quot|#34|#x22);/g,\n      val: \"\\\"\"\n    }\n  };\n  this.ampEntity = {\n    regex: /&(amp|#38|#x26);/g,\n    val: \"&\"\n  };\n  this.htmlEntities = {\n    \"space\": {\n      regex: /&(nbsp|#160);/g,\n      val: \" \"\n    },\n    // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n    // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n    // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n    // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n    // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n    \"cent\": {\n      regex: /&(cent|#162);/g,\n      val: \"¢\"\n    },\n    \"pound\": {\n      regex: /&(pound|#163);/g,\n      val: \"£\"\n    },\n    \"yen\": {\n      regex: /&(yen|#165);/g,\n      val: \"¥\"\n    },\n    \"euro\": {\n      regex: /&(euro|#8364);/g,\n      val: \"€\"\n    },\n    \"copyright\": {\n      regex: /&(copy|#169);/g,\n      val: \"©\"\n    },\n    \"reg\": {\n      regex: /&(reg|#174);/g,\n      val: \"®\"\n    },\n    \"inr\": {\n      regex: /&(inr|#8377);/g,\n      val: \"₹\"\n    }\n  };\n  this.addExternalEntities = addExternalEntities;\n  this.parseXml = parseXml;\n  this.parseTextData = parseTextData;\n  this.resolveNameSpace = resolveNameSpace;\n  this.buildAttributesMap = buildAttributesMap;\n  this.isItStopNode = isItStopNode;\n  this.replaceEntitiesValue = replaceEntitiesValue;\n  this.readStopNodeData = readStopNodeData;\n  this.saveTextToParentTag = saveTextToParentTag;\n  this.addChild = addChild;\n});\nfunction addExternalEntities(externalEntities) {\n  var entKeys = Object.keys(externalEntities);\n  for (var i = 0; i < entKeys.length; i++) {\n    var ent = entKeys[i];\n    this.lastEntities[ent] = {\n      regex: new RegExp(\"&\" + ent + \";\", \"g\"),\n      val: externalEntities[ent]\n    };\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if (val.length > 0) {\n      if (!escapeEntities) val = this.replaceEntitiesValue(val);\n      var newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if (newval === null || newval === undefined) {\n        //don't parse\n        return val;\n      } else if (typeof newval !== typeof val || newval !== val) {\n        //overwrite\n        return newval;\n      } else if (this.options.trimValues) {\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      } else {\n        var trimmedVal = val.trim();\n        if (trimmedVal === val) {\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        } else {\n          return val;\n        }\n      }\n    }\n  }\n}\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    var tags = tagname.split(':');\n    var prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nvar attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    var matches = util.getAllMatches(attrStr, attrsRegx);\n    var len = matches.length; //don't make it inline\n    var attrs = {};\n    for (var i = 0; i < len; i++) {\n      var attrName = this.resolveNameSpace(matches[i][1]);\n      var oldVal = matches[i][4];\n      var aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if (aName === \"__proto__\") aName = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          var newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if (newVal === null || newVal === undefined) {\n            //don't parse\n            attrs[aName] = oldVal;\n          } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {\n            //overwrite\n            attrs[aName] = newVal;\n          } else {\n            //parse\n            attrs[aName] = parseValue(oldVal, this.options.parseAttributeValue, this.options.numberParseOptions);\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      var attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs;\n  }\n}\nvar parseXml = function parseXml(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  var xmlObj = new xmlNode('!xml');\n  var currentNode = xmlObj;\n  var textData = \"\";\n  var jPath = \"\";\n  for (var i = 0; i < xmlData.length; i++) {\n    //for each char in XML data\n    var ch = xmlData[i];\n    if (ch === '<') {\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if (xmlData[i + 1] === '/') {\n        //Closing Tag\n        var closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\");\n        var tagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (this.options.removeNSPrefix) {\n          var colonIndex = tagName.indexOf(\":\");\n          if (colonIndex !== -1) {\n            tagName = tagName.substr(colonIndex + 1);\n          }\n        }\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        if (currentNode) {\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        var lastTagName = jPath.substring(jPath.lastIndexOf(\".\") + 1);\n        if (tagName && this.options.unpairedTags.indexOf(tagName) !== -1) {\n          throw new Error(\"Unpaired tag can not be used as closing tag: </\".concat(tagName, \">\"));\n        }\n        var propIndex = 0;\n        if (lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1) {\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.') - 1);\n          this.tagsNodeStack.pop();\n        } else {\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n        currentNode = this.tagsNodeStack.pop(); //avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        var tagData = readTagExp(xmlData, i, false, \"?>\");\n        if (!tagData) throw new Error(\"Pi Tag is not closed.\");\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if (this.options.ignoreDeclaration && tagData.tagName === \"?xml\" || this.options.ignorePiTags) {} else {\n          var childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath);\n        }\n        i = tagData.closeIndex + 1;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        var endIndex = findClosingIndex(xmlData, \"-->\", i + 4, \"Comment is not closed.\");\n        if (this.options.commentPropName) {\n          var comment = xmlData.substring(i + 4, endIndex - 2);\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n          currentNode.add(this.options.commentPropName, [_defineProperty({}, this.options.textNodeName, comment)]);\n        }\n        i = endIndex;\n      } else if (xmlData.substr(i + 1, 2) === '!D') {\n        var result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        var _closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        var tagExp = xmlData.substring(i + 9, _closeIndex);\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if (this.options.cdataPropName) {\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [_defineProperty({}, this.options.textNodeName, tagExp)]);\n        } else {\n          var val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if (val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        i = _closeIndex + 2;\n      } else {\n        //Opening tag\n        var _result = readTagExp(xmlData, i, this.options.removeNSPrefix);\n        var _tagName = _result.tagName;\n        var _tagExp = _result.tagExp;\n        var attrExpPresent = _result.attrExpPresent;\n        var _closeIndex2 = _result.closeIndex;\n        if (this.options.transformTagName) {\n          _tagName = this.options.transformTagName(_tagName);\n        }\n\n        //save text as child node\n        if (currentNode && textData) {\n          if (currentNode.tagname !== '!xml') {\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        var lastTag = currentNode;\n        if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if (_tagName !== xmlObj.tagname) {\n          jPath += jPath ? \".\" + _tagName : _tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, _tagName)) {\n          //TODO: namespace\n          var tagContent = \"\";\n          //self-closing tag\n          if (_tagExp.length > 0 && _tagExp.lastIndexOf(\"/\") === _tagExp.length - 1) {\n            i = _result.closeIndex;\n          }\n          //unpaired tag\n          else if (this.options.unpairedTags.indexOf(_tagName) !== -1) {\n            i = _result.closeIndex;\n          }\n          //normal tag\n          else {\n            //read until closing tag is found\n            var _result2 = this.readStopNodeData(xmlData, _tagName, _closeIndex2 + 1);\n            if (!_result2) throw new Error(\"Unexpected end of \".concat(_tagName));\n            i = _result2.i;\n            tagContent = _result2.tagContent;\n          }\n          var _childNode = new xmlNode(_tagName);\n          if (_tagName !== _tagExp && attrExpPresent) {\n            _childNode[\":@\"] = this.buildAttributesMap(_tagExp, jPath, _tagName);\n          }\n          if (tagContent) {\n            tagContent = this.parseTextData(tagContent, _tagName, jPath, true, attrExpPresent, true, true);\n          }\n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          _childNode.add(this.options.textNodeName, tagContent);\n          this.addChild(currentNode, _childNode, jPath);\n        } else {\n          //selfClosing tag\n          if (_tagExp.length > 0 && _tagExp.lastIndexOf(\"/\") === _tagExp.length - 1) {\n            if (_tagName[_tagName.length - 1] === \"/\") {\n              //remove trailing '/'\n              _tagName = _tagName.substr(0, _tagName.length - 1);\n              _tagExp = _tagName;\n            } else {\n              _tagExp = _tagExp.substr(0, _tagExp.length - 1);\n            }\n            if (this.options.transformTagName) {\n              _tagName = this.options.transformTagName(_tagName);\n            }\n            var _childNode2 = new xmlNode(_tagName);\n            if (_tagName !== _tagExp && attrExpPresent) {\n              _childNode2[\":@\"] = this.buildAttributesMap(_tagExp, jPath, _tagName);\n            }\n            this.addChild(currentNode, _childNode2, jPath);\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n          //opening tag\n          else {\n            var _childNode3 = new xmlNode(_tagName);\n            this.tagsNodeStack.push(currentNode);\n            if (_tagName !== _tagExp && attrExpPresent) {\n              _childNode3[\":@\"] = this.buildAttributesMap(_tagExp, jPath, _tagName);\n            }\n            this.addChild(currentNode, _childNode3, jPath);\n            currentNode = _childNode3;\n          }\n          textData = \"\";\n          i = _closeIndex2;\n        }\n      }\n    } else {\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n};\nfunction addChild(currentNode, childNode, jPath) {\n  var result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"]);\n  if (result === false) {} else if (typeof result === \"string\") {\n    childNode.tagname = result;\n    currentNode.addChild(childNode);\n  } else {\n    currentNode.addChild(childNode);\n  }\n}\nvar replaceEntitiesValue = function replaceEntitiesValue(val) {\n  if (this.options.processEntities) {\n    for (var entityName in this.docTypeEntities) {\n      var entity = this.docTypeEntities[entityName];\n      val = val.replace(entity.regx, entity.val);\n    }\n    for (var _entityName in this.lastEntities) {\n      var _entity = this.lastEntities[_entityName];\n      val = val.replace(_entity.regex, _entity.val);\n    }\n    if (this.options.htmlEntities) {\n      for (var _entityName2 in this.htmlEntities) {\n        var _entity2 = this.htmlEntities[_entityName2];\n        val = val.replace(_entity2.regex, _entity2.val);\n      }\n    }\n    val = val.replace(this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n};\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) {\n    //store previously collected data as textNode\n    if (isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0;\n    textData = this.parseTextData(textData, currentNode.tagname, jPath, false, currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false, isLeafNode);\n    if (textData !== undefined && textData !== \"\") currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName) {\n  var allNodesExp = \"*.\" + currentTagName;\n  for (var stopNodePath in stopNodes) {\n    var stopNodeExp = stopNodes[stopNodePath];\n    if (allNodesExp === stopNodeExp || jPath === stopNodeExp) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i) {\n  var closingChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \">\";\n  var attrBoundary;\n  var tagExp = \"\";\n  for (var index = i; index < xmlData.length; index++) {\n    var ch = xmlData[index];\n    if (attrBoundary) {\n      if (ch === attrBoundary) attrBoundary = \"\"; //reset\n    } else if (ch === '\"' || ch === \"'\") {\n      attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if (closingChar[1]) {\n        if (xmlData[index + 1] === closingChar[1]) {\n          return {\n            data: tagExp,\n            index: index\n          };\n        }\n      } else {\n        return {\n          data: tagExp,\n          index: index\n        };\n      }\n    } else if (ch === '\\t') {\n      ch = \" \";\n    }\n    tagExp += ch;\n  }\n}\nfunction findClosingIndex(xmlData, str, i, errMsg) {\n  var closingIndex = xmlData.indexOf(str, i);\n  if (closingIndex === -1) {\n    throw new Error(errMsg);\n  } else {\n    return closingIndex + str.length - 1;\n  }\n}\nfunction readTagExp(xmlData, i, removeNSPrefix) {\n  var closingChar = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \">\";\n  var result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);\n  if (!result) return;\n  var tagExp = result.data;\n  var closeIndex = result.index;\n  var separatorIndex = tagExp.search(/\\s/);\n  var tagName = tagExp;\n  var attrExpPresent = true;\n  if (separatorIndex !== -1) {\n    //separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n  if (removeNSPrefix) {\n    var colonIndex = tagName.indexOf(\":\");\n    if (colonIndex !== -1) {\n      tagName = tagName.substr(colonIndex + 1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent\n  };\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i) {\n  var startIndex = i;\n  // Starting at 1 since we already have an open tag\n  var openTagCount = 1;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === \"<\") {\n      if (xmlData[i + 1] === \"/\") {\n        //close tag\n        var closeIndex = findClosingIndex(xmlData, \">\", i, \"\".concat(tagName, \" is not closed\"));\n        var closeTagName = xmlData.substring(i + 2, closeIndex).trim();\n        if (closeTagName === tagName) {\n          openTagCount--;\n          if (openTagCount === 0) {\n            return {\n              tagContent: xmlData.substring(startIndex, i),\n              i: closeIndex\n            };\n          }\n        }\n        i = closeIndex;\n      } else if (xmlData[i + 1] === '?') {\n        var _closeIndex3 = findClosingIndex(xmlData, \"?>\", i + 1, \"StopNode is not closed.\");\n        i = _closeIndex3;\n      } else if (xmlData.substr(i + 1, 3) === '!--') {\n        var _closeIndex4 = findClosingIndex(xmlData, \"-->\", i + 3, \"StopNode is not closed.\");\n        i = _closeIndex4;\n      } else if (xmlData.substr(i + 1, 2) === '![') {\n        var _closeIndex5 = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n        i = _closeIndex5;\n      } else {\n        var tagData = readTagExp(xmlData, i, '>');\n        if (tagData) {\n          var openTagName = tagData && tagData.tagName;\n          if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== \"/\") {\n            openTagCount++;\n          }\n          i = tagData.closeIndex;\n        }\n      }\n    }\n  } //end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    var newval = val.trim();\n    if (newval === 'true') return true;else if (newval === 'false') return false;else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\nmodule.exports = OrderedObjParser;","map":{"version":3,"names":["_defineProperty","require","default","_createClass","_classCallCheck","util","xmlNode","readDocType","toNumber","regx","replace","nameRegexp","OrderedObjParser","options","currentNode","tagsNodeStack","docTypeEntities","lastEntities","regex","val","ampEntity","htmlEntities","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","externalEntities","entKeys","Object","keys","i","length","ent","RegExp","tagName","jPath","dontTrim","hasAttributes","isLeafNode","escapeEntities","undefined","trimValues","trim","newval","tagValueProcessor","parseValue","parseTagValue","numberParseOptions","trimmedVal","tagname","removeNSPrefix","tags","split","prefix","charAt","attrsRegx","attrStr","ignoreAttributes","matches","getAllMatches","len","attrs","attrName","oldVal","aName","attributeNamePrefix","transformAttributeName","newVal","attributeValueProcessor","parseAttributeValue","allowBooleanAttributes","attributesGroupName","attrCollection","xmlData","xmlObj","textData","ch","closeIndex","findClosingIndex","substring","colonIndex","indexOf","substr","transformTagName","lastTagName","lastIndexOf","unpairedTags","Error","concat","propIndex","pop","tagData","readTagExp","ignoreDeclaration","ignorePiTags","childNode","add","textNodeName","tagExp","attrExpPresent","endIndex","commentPropName","comment","result","entities","cdataPropName","lastTag","stopNodes","tagContent","push","child","updateTag","processEntities","entityName","entity","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","arguments","attrBoundary","index","data","str","errMsg","closingIndex","separatorIndex","search","startIndex","openTagCount","closeTagName","openTagName","shouldParse","isExist","module","exports"],"sources":["/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"],"sourcesContent":["'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) { //TODO: namespace\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, tagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${tagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}