{"ast":null,"code":"import { __assign, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport booleanClockwise from '@turf/boolean-clockwise';\nexport function validateCoordinates(lng, lat) {\n  if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n    throw new Error(\"Invalid coordinates: [\" + lng + \",\" + lat + \"]\");\n  }\n  if (lat < -90 || 90 < lat) {\n    throw new Error('Latitude must be between -90 and 90 degrees inclusive.');\n  } else if (lng < -180 || 180 < lng) {\n    throw new Error('Longitude must be between -180 and 180 degrees inclusive.');\n  }\n}\nexport function validateGeofenceId(geofenceId) {\n  var geofenceIdRegex = /^(?:[\\x2D\\.0-9A-Z_a-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])+$/i;\n  // Check if geofenceId is valid\n  if (!geofenceIdRegex.test(geofenceId)) {\n    throw new Error(\"Invalid geofenceId: '\" + geofenceId + \"' - IDs can only contain alphanumeric characters, hyphens, underscores and periods.\");\n  }\n}\nexport function validateLinearRing(linearRing, geofenceId) {\n  var errorPrefix = geofenceId ? geofenceId + \": \" : '';\n  // Validate LinearRing size, must be at least 4 points\n  if (linearRing.length < 4) {\n    throw new Error(errorPrefix + \"LinearRing must contain 4 or more coordinates.\");\n  }\n  // Validate all coordinates are valid, error with which ones are bad\n  var badCoordinates = [];\n  linearRing.forEach(function (coordinates) {\n    try {\n      validateCoordinates(coordinates[0], coordinates[1]);\n    } catch (error) {\n      badCoordinates.push({\n        coordinates: coordinates,\n        error: error.message\n      });\n    }\n  });\n  if (badCoordinates.length > 0) {\n    throw new Error(errorPrefix + \"One or more of the coordinates in the Polygon LinearRing are not valid: \" + JSON.stringify(badCoordinates));\n  }\n  // Validate first and last coordinates are the same\n  var _a = __read(linearRing[0], 2),\n    lngA = _a[0],\n    latA = _a[1];\n  var _b = __read(linearRing[linearRing.length - 1], 2),\n    lngB = _b[0],\n    latB = _b[1];\n  if (lngA !== lngB || latA !== latB) {\n    throw new Error(errorPrefix + \"LinearRing's first and last coordinates are not the same\");\n  }\n  if (booleanClockwise(linearRing)) {\n    throw new Error(errorPrefix + \"LinearRing coordinates must be wound counterclockwise\");\n  }\n}\nexport function validatePolygon(polygon, geofenceId) {\n  var errorPrefix = geofenceId ? geofenceId + \": \" : '';\n  if (!Array.isArray(polygon)) {\n    throw new Error(errorPrefix + \"Polygon is of incorrect structure. It should be an array of LinearRings\");\n  }\n  if (polygon.length < 1) {\n    throw new Error(errorPrefix + \"Polygon must have a single LinearRing array.\");\n  }\n  if (polygon.length > 1) {\n    throw new Error(errorPrefix + \"Polygon must have a single LinearRing array. Note: We do not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian.\");\n  }\n  var verticesCount = polygon.reduce(function (prev, linearRing) {\n    return prev + linearRing.length;\n  }, 0);\n  if (verticesCount > 1000) {\n    throw new Error(errorPrefix + \"Polygon has more than the maximum 1000 vertices.\");\n  }\n  polygon.forEach(function (linearRing) {\n    validateLinearRing(linearRing, geofenceId);\n  });\n}\nexport function validateGeofencesInput(geofences) {\n  var geofenceIds = {};\n  geofences.forEach(function (geofence) {\n    // verify all required properties are present\n    // Validate geofenceId exists\n    if (!geofence.geofenceId) {\n      throw new Error(\"Geofence '\" + geofence + \"' is missing geofenceId\");\n    }\n    var geofenceId = geofence.geofenceId;\n    validateGeofenceId(geofenceId);\n    // Validate geofenceId is unique\n    if (geofenceIds[geofenceId]) {\n      throw new Error(\"Duplicate geofenceId: \" + geofenceId);\n    } else {\n      geofenceIds[geofenceId] = true;\n    }\n    // Validate geometry exists\n    if (!geofence.geometry) {\n      throw new Error(\"Geofence '\" + geofenceId + \"' is missing geometry\");\n    }\n    var geometry = geofence.geometry;\n    // Validate polygon exists\n    if (!geometry.polygon) {\n      throw new Error(\"Geofence '\" + geofenceId + \"' is missing geometry.polygon\");\n    }\n    var polygon = geometry.polygon;\n    // Validate polygon length and structure\n    try {\n      validatePolygon(polygon, geofenceId);\n    } catch (error) {\n      if (error.message.includes('Polygon has more than the maximum 1000 vertices.')) {\n        throw new Error(\"Geofence '\" + geofenceId + \"' has more than the maximum of 1000 vertices\");\n      }\n    }\n    // Validate LinearRing length, structure, and coordinates\n    var _a = __read(polygon, 1),\n      linearRing = _a[0];\n    validateLinearRing(linearRing, geofenceId);\n  });\n}\nexport function mapSearchOptions(options, locationServiceInput) {\n  var locationServiceModifiedInput = __assign({}, locationServiceInput);\n  locationServiceModifiedInput.FilterCountries = options.countries;\n  locationServiceModifiedInput.MaxResults = options.maxResults;\n  if (options.searchIndexName) {\n    locationServiceModifiedInput.IndexName = options.searchIndexName;\n  }\n  if (options['biasPosition'] && options['searchAreaConstraints']) {\n    throw new Error('BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object');\n  }\n  if (options['biasPosition']) {\n    locationServiceModifiedInput.BiasPosition = options['biasPosition'];\n  }\n  if (options['searchAreaConstraints']) {\n    locationServiceModifiedInput.FilterBBox = options['searchAreaConstraints'];\n  }\n  return locationServiceModifiedInput;\n}","map":{"version":3,"names":["booleanClockwise","validateCoordinates","lng","lat","Number","isFinite","Error","validateGeofenceId","geofenceId","geofenceIdRegex","test","validateLinearRing","linearRing","errorPrefix","length","badCoordinates","forEach","coordinates","error","push","message","JSON","stringify","_a","__read","lngA","latA","_b","lngB","latB","validatePolygon","polygon","Array","isArray","verticesCount","reduce","prev","validateGeofencesInput","geofences","geofenceIds","geofence","geometry","includes","mapSearchOptions","options","locationServiceInput","locationServiceModifiedInput","__assign","FilterCountries","countries","MaxResults","maxResults","searchIndexName","IndexName","BiasPosition","FilterBBox"],"sources":["/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@aws-amplify/geo/src/util.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport booleanClockwise from '@turf/boolean-clockwise';\n\nimport {\n\tLongitude,\n\tLatitude,\n\tGeofenceId,\n\tGeofenceInput,\n\tGeofencePolygon,\n\tLinearRing,\n} from './types';\n\nexport function validateCoordinates(lng: Longitude, lat: Latitude): void {\n\tif (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n\t\tthrow new Error(`Invalid coordinates: [${lng},${lat}]`);\n\t}\n\tif (lat < -90 || 90 < lat) {\n\t\tthrow new Error('Latitude must be between -90 and 90 degrees inclusive.');\n\t} else if (lng < -180 || 180 < lng) {\n\t\tthrow new Error(\n\t\t\t'Longitude must be between -180 and 180 degrees inclusive.'\n\t\t);\n\t}\n}\n\nexport function validateGeofenceId(geofenceId: GeofenceId): void {\n\tconst geofenceIdRegex = /^[-._\\p{L}\\p{N}]+$/iu;\n\n\t// Check if geofenceId is valid\n\tif (!geofenceIdRegex.test(geofenceId)) {\n\t\tthrow new Error(\n\t\t\t`Invalid geofenceId: '${geofenceId}' - IDs can only contain alphanumeric characters, hyphens, underscores and periods.`\n\t\t);\n\t}\n}\n\nexport function validateLinearRing(\n\tlinearRing: LinearRing,\n\tgeofenceId?: GeofenceId\n): void {\n\tconst errorPrefix = geofenceId ? `${geofenceId}: ` : '';\n\t// Validate LinearRing size, must be at least 4 points\n\tif (linearRing.length < 4) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}LinearRing must contain 4 or more coordinates.`\n\t\t);\n\t}\n\n\t// Validate all coordinates are valid, error with which ones are bad\n\tconst badCoordinates = [];\n\tlinearRing.forEach(coordinates => {\n\t\ttry {\n\t\t\tvalidateCoordinates(coordinates[0], coordinates[1]);\n\t\t} catch (error) {\n\t\t\tbadCoordinates.push({ coordinates, error: error.message });\n\t\t}\n\t});\n\tif (badCoordinates.length > 0) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}One or more of the coordinates in the Polygon LinearRing are not valid: ${JSON.stringify(\n\t\t\t\tbadCoordinates\n\t\t\t)}`\n\t\t);\n\t}\n\n\t// Validate first and last coordinates are the same\n\tconst [lngA, latA] = linearRing[0];\n\tconst [lngB, latB] = linearRing[linearRing.length - 1];\n\n\tif (lngA !== lngB || latA !== latB) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}LinearRing's first and last coordinates are not the same`\n\t\t);\n\t}\n\n\tif (booleanClockwise(linearRing)) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}LinearRing coordinates must be wound counterclockwise`\n\t\t);\n\t}\n}\n\nexport function validatePolygon(\n\tpolygon: GeofencePolygon,\n\tgeofenceId?: GeofenceId\n): void {\n\tconst errorPrefix = geofenceId ? `${geofenceId}: ` : '';\n\tif (!Array.isArray(polygon)) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}Polygon is of incorrect structure. It should be an array of LinearRings`\n\t\t);\n\t}\n\tif (polygon.length < 1) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}Polygon must have a single LinearRing array.`\n\t\t);\n\t}\n\n\tif (polygon.length > 1) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}Polygon must have a single LinearRing array. Note: We do not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian.`\n\t\t);\n\t}\n\tconst verticesCount = polygon.reduce(\n\t\t(prev, linearRing) => prev + linearRing.length,\n\t\t0\n\t);\n\tif (verticesCount > 1000) {\n\t\tthrow new Error(\n\t\t\t`${errorPrefix}Polygon has more than the maximum 1000 vertices.`\n\t\t);\n\t}\n\tpolygon.forEach(linearRing => {\n\t\tvalidateLinearRing(linearRing, geofenceId);\n\t});\n}\n\nexport function validateGeofencesInput(geofences: GeofenceInput[]) {\n\tconst geofenceIds = {};\n\n\tgeofences.forEach((geofence: GeofenceInput) => {\n\t\t// verify all required properties are present\n\n\t\t// Validate geofenceId exists\n\t\tif (!geofence.geofenceId) {\n\t\t\tthrow new Error(`Geofence '${geofence}' is missing geofenceId`);\n\t\t}\n\t\tconst { geofenceId } = geofence;\n\t\tvalidateGeofenceId(geofenceId);\n\n\t\t// Validate geofenceId is unique\n\t\tif (geofenceIds[geofenceId]) {\n\t\t\tthrow new Error(`Duplicate geofenceId: ${geofenceId}`);\n\t\t} else {\n\t\t\tgeofenceIds[geofenceId] = true;\n\t\t}\n\n\t\t// Validate geometry exists\n\t\tif (!geofence.geometry) {\n\t\t\tthrow new Error(`Geofence '${geofenceId}' is missing geometry`);\n\t\t}\n\t\tconst { geometry } = geofence;\n\n\t\t// Validate polygon exists\n\t\tif (!geometry.polygon) {\n\t\t\tthrow new Error(`Geofence '${geofenceId}' is missing geometry.polygon`);\n\t\t}\n\t\tconst { polygon } = geometry;\n\n\t\t// Validate polygon length and structure\n\t\ttry {\n\t\t\tvalidatePolygon(polygon, geofenceId);\n\t\t} catch (error) {\n\t\t\tif (\n\t\t\t\terror.message.includes(\n\t\t\t\t\t'Polygon has more than the maximum 1000 vertices.'\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Geofence '${geofenceId}' has more than the maximum of 1000 vertices`\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Validate LinearRing length, structure, and coordinates\n\t\tconst [linearRing] = polygon;\n\t\tvalidateLinearRing(linearRing, geofenceId);\n\t});\n}\n\nexport function mapSearchOptions(options, locationServiceInput) {\n\tconst locationServiceModifiedInput = { ...locationServiceInput };\n\tlocationServiceModifiedInput.FilterCountries = options.countries;\n\tlocationServiceModifiedInput.MaxResults = options.maxResults;\n\n\tif (options.searchIndexName) {\n\t\tlocationServiceModifiedInput.IndexName = options.searchIndexName;\n\t}\n\n\tif (options['biasPosition'] && options['searchAreaConstraints']) {\n\t\tthrow new Error(\n\t\t\t'BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object'\n\t\t);\n\t}\n\tif (options['biasPosition']) {\n\t\tlocationServiceModifiedInput.BiasPosition = options['biasPosition'];\n\t}\n\tif (options['searchAreaConstraints']) {\n\t\tlocationServiceModifiedInput.FilterBBox = options['searchAreaConstraints'];\n\t}\n\treturn locationServiceModifiedInput;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}