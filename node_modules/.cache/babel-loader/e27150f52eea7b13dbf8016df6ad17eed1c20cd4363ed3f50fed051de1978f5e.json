{"ast":null,"code":"import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nfunction useAuthenticator(selector) {\n  var context = React.useContext(AuthenticatorContext);\n  if (!context) {\n    throw new Error(USE_AUTHENTICATOR_ERROR);\n  }\n  var service = context.service;\n  var send = service.send;\n  var xstateSelector = useCallback(function (state) {\n    return Object.assign({}, getServiceFacade({\n      send: send,\n      state: state\n    }));\n  }, [send]);\n  var comparator = selector ? getComparator(selector) : defaultComparator;\n  // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n  // not update on external sign in events (for example when a user is not using the `Authenticator`).\n  var authStatus = context.authStatus;\n  var facade = useSelector(service, xstateSelector, comparator);\n  var route = facade.route,\n    totpSecretCode = facade.totpSecretCode,\n    unverifiedContactMethods = facade.unverifiedContactMethods,\n    user = facade.user,\n    rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]);\n  // do not memoize output. `service.getSnapshot` reference remains stable preventing\n  // `fields` from updating with current form state on value changes\n  var serviceSnapshot = service.getSnapshot();\n  // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n  var QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;\n  // legacy `formFields` values required until form state is removed from state machine\n  var fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n  return Object.assign(Object.assign({}, rest), {\n    authStatus: authStatus,\n    route: route,\n    totpSecretCode: totpSecretCode,\n    unverifiedContactMethods: unverifiedContactMethods,\n    user: user,\n    /** @deprecated For internal use only */\n    fields: fields,\n    getTotpSecretCode: getTotpSecretCodeCallback(user),\n    QRFields: QRFields\n  });\n}\nexport { useAuthenticator as default };","map":{"version":3,"names":["__rest","React","useCallback","useSelector","getServiceFacade","AuthenticatorContext","USE_AUTHENTICATOR_ERROR","getQRFields","getMachineFields","getTotpSecretCodeCallback","getComparator","defaultComparator","useAuthenticator","selector","context","useContext","Error","service","send","xstateSelector","state","Object","assign","comparator","authStatus","facade","route","totpSecretCode","unverifiedContactMethods","user","rest","serviceSnapshot","getSnapshot","QRFields","fields","getTotpSecretCode","default"],"sources":["/Users/nicolasarchila/Documents/Arquitectura/amplify/juanv2/react-amplify-poc/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs"],"sourcesContent":["import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nfunction useAuthenticator(selector) {\n    const context = React.useContext(AuthenticatorContext);\n    if (!context) {\n        throw new Error(USE_AUTHENTICATOR_ERROR);\n    }\n    const { service } = context;\n    const { send } = service;\n    const xstateSelector = useCallback((state) => (Object.assign({}, getServiceFacade({ send, state }))), [send]);\n    const comparator = selector ? getComparator(selector) : defaultComparator;\n    // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n    // not update on external sign in events (for example when a user is not using the `Authenticator`).\n    const { authStatus } = context;\n    const facade = useSelector(service, xstateSelector, comparator);\n    const { route, totpSecretCode, unverifiedContactMethods, user } = facade, rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]);\n    // do not memoize output. `service.getSnapshot` reference remains stable preventing\n    // `fields` from updating with current form state on value changes\n    const serviceSnapshot = service.getSnapshot();\n    // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n    const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;\n    // legacy `formFields` values required until form state is removed from state machine\n    const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n    return Object.assign(Object.assign({}, rest), { authStatus,\n        route,\n        totpSecretCode,\n        unverifiedContactMethods,\n        user,\n        /** @deprecated For internal use only */\n        fields, getTotpSecretCode: getTotpSecretCodeCallback(user), QRFields });\n}\n\nexport { useAuthenticator as default };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,2CAA2C;AAClE,OAAOC,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,OAAO,aAAa;AACpB,SAASC,oBAAoB,QAAQ,wCAAwC;AAC7E,SAASC,uBAAuB,QAAQ,iBAAiB;AACzD,SAASC,WAAW,EAAEC,gBAAgB,EAAEC,yBAAyB,EAAEC,aAAa,EAAEC,iBAAiB,QAAQ,aAAa;;AAExH;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,QAAQ,EAAE;EAChC,IAAMC,OAAO,GAAGb,KAAK,CAACc,UAAU,CAACV,oBAAoB,CAAC;EACtD,IAAI,CAACS,OAAO,EAAE;IACV,MAAM,IAAIE,KAAK,CAACV,uBAAuB,CAAC;EAC5C;EACA,IAAQW,OAAO,GAAKH,OAAO,CAAnBG,OAAO;EACf,IAAQC,IAAI,GAAKD,OAAO,CAAhBC,IAAI;EACZ,IAAMC,cAAc,GAAGjB,WAAW,CAAC,UAACkB,KAAK;IAAA,OAAMC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAElB,gBAAgB,CAAC;MAAEc,IAAI,EAAJA,IAAI;MAAEE,KAAK,EAALA;IAAM,CAAC,CAAC,CAAC;EAAA,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAC7G,IAAMK,UAAU,GAAGV,QAAQ,GAAGH,aAAa,CAACG,QAAQ,CAAC,GAAGF,iBAAiB;EACzE;EACA;EACA,IAAQa,UAAU,GAAKV,OAAO,CAAtBU,UAAU;EAClB,IAAMC,MAAM,GAAGtB,WAAW,CAACc,OAAO,EAAEE,cAAc,EAAEI,UAAU,CAAC;EAC/D,IAAQG,KAAK,GAAqDD,MAAM,CAAhEC,KAAK;IAAEC,cAAc,GAAqCF,MAAM,CAAzDE,cAAc;IAAEC,wBAAwB,GAAWH,MAAM,CAAzCG,wBAAwB;IAAEC,IAAI,GAAKJ,MAAM,CAAfI,IAAI;IAAaC,IAAI,GAAG9B,MAAM,CAACyB,MAAM,EAAE,CAAC,OAAO,EAAE,gBAAgB,EAAE,0BAA0B,EAAE,MAAM,CAAC,CAAC;EAChK;EACA;EACA,IAAMM,eAAe,GAAGd,OAAO,CAACe,WAAW,CAAC,CAAC;EAC7C;EACA,IAAMC,QAAQ,GAAGP,KAAK,KAAK,WAAW,GAAGnB,WAAW,CAACwB,eAAe,CAAC,GAAG,IAAI;EAC5E;EACA,IAAMG,MAAM,GAAG1B,gBAAgB,CAACkB,KAAK,EAAEK,eAAe,EAAEH,wBAAwB,CAAC;EACjF,OAAOP,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEQ,IAAI,CAAC,EAAE;IAAEN,UAAU,EAAVA,UAAU;IACtDE,KAAK,EAALA,KAAK;IACLC,cAAc,EAAdA,cAAc;IACdC,wBAAwB,EAAxBA,wBAAwB;IACxBC,IAAI,EAAJA,IAAI;IACJ;IACAK,MAAM,EAANA,MAAM;IAAEC,iBAAiB,EAAE1B,yBAAyB,CAACoB,IAAI,CAAC;IAAEI,QAAQ,EAARA;EAAS,CAAC,CAAC;AAC/E;AAEA,SAASrB,gBAAgB,IAAIwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}